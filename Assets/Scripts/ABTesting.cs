using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Beamable;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common.Api.CloudData;
using TMPro;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.Networking;

/// <summary>
/// Represents the data in
/// the A/B Testing trial.
/// </summary>
[System.Serializable]
public class MyPlayerProgression
{
    public int MaxHealth = 100;
    public int MaxInventorySpace = 10;
}

/// <summary>
/// Holds data for use in the <see cref="ConnectivityServiceExampleUI"/>.
/// </summary>
[System.Serializable]
public class TrialDataServiceExampleData
{
    public bool IsUIInteractable = false;
    public string DataName = "MyPlayerProgression";
    public MyPlayerProgression MyPlayerProgression = null;
    public List<CloudMetaData> CloudMetaDatas = new List<CloudMetaData>();
    public bool IsInABTest { get { return CloudMetaDatas.Count > 0; } }
}

[System.Serializable]
public class RefreshedUnityEvent : UnityEvent<TrialDataServiceExampleData> { }

/// <summary>
/// Demonstrates <see cref="TrialDataService"/>.
///
/// NOTE: This demo uses other concepts
/// too. See <see cref="CloudSavingServiceExample"/>
/// for more info.
/// 
/// </summary>
public class ABTesting : MonoBehaviour
{
    //  Events  ---------------------------------------
    [HideInInspector] public RefreshedUnityEvent OnRefreshed = new RefreshedUnityEvent();

    //  Fields  ---------------------------------------
    private TrialDataServiceExampleData _data = new TrialDataServiceExampleData();
    private ICloudDataApi _trialDataService;
    private IBeamableAPI _beamableAPI;

    // UI Elements
    public TMP_Text healthText;
    public TMP_Text inventoryText;
    public TMP_Text abTestStatusText;

    //  Unity Methods  --------------------------------
    protected async void Start()
    {
        var beamContext = await BeamContext.Default.Instance;
        Debug.Log($"Player ID: {beamContext.PlayerId}");

        SetupBeamable();
    }

    //  Methods  --------------------------------------
    private async void SetupBeamable()
    {
        Debug.Log("Setting up Beamable API...");
        _beamableAPI = await Beamable.API.Instance;
        Debug.Log($"Beamable API Initialized. User ID: {_beamableAPI.User.id}");

        _trialDataService = _beamableAPI.TrialDataService;

        await LoadTrialData();
    }

    public async Task<EmptyResponse> LoadTrialData()
    {
        Debug.Log("Loading trial data...");
        
        // Load any trials
        GetCloudDataManifestResponse playerManifestResponse = await _trialDataService.GetPlayerManifest();
        Debug.Log($"Player manifest received. Number of trials: {playerManifestResponse.meta.Count}");

        // Loop through trials
        _data.MyPlayerProgression = null;
        _data.CloudMetaDatas = playerManifestResponse.meta;

        foreach (CloudMetaData cloudMetaData in _data.CloudMetaDatas)
        {
            string path = $"https://{cloudMetaData.uri}";
            Debug.Log($"Fetching trial data from: {path}");

            using (UnityWebRequest webRequest = UnityWebRequest.Get(path))
            {
                var operation = webRequest.SendWebRequest();
                while (!operation.isDone)
                {
                    await Task.Yield();
                }

                if (webRequest.result == UnityWebRequest.Result.ConnectionError || 
                    webRequest.result == UnityWebRequest.Result.ProtocolError)
                {
                    Debug.LogError($"Error fetching trial data: {webRequest.error}");
                    continue;
                }

                string response = webRequest.downloadHandler.text;
                MyPlayerProgression myPlayerProgression = JsonUtility.FromJson<MyPlayerProgression>(response);

                // If trial is related, store data
                if (myPlayerProgression != null)
                {
                    Debug.Log($"Trial data loaded: MaxHealth={myPlayerProgression.MaxHealth}, MaxInventorySpace={myPlayerProgression.MaxInventorySpace}");
                    _data.MyPlayerProgression = myPlayerProgression;
                }
                else
                {
                    Debug.LogWarning("No valid player progression data found in this trial.");
                }
            }
        }

        _data.IsUIInteractable = true;
        Refresh();
        return new EmptyResponse();
    }

    public void Refresh()
    {
        Debug.Log("Refreshing UI with trial data...");

        if (_data.IsInABTest && _data.MyPlayerProgression != null)
        {
            Debug.Log("Player is in A/B Test. Updating UI with test data.");
            healthText.text = $"Max Health: {_data.MyPlayerProgression.MaxHealth}";
            inventoryText.text = $"Max Inventory Space: {_data.MyPlayerProgression.MaxInventorySpace}";
            abTestStatusText.text = "A/B Test Active";
        }
        else
        {
            Debug.Log("Player is not in A/B Test or no valid data found. Showing default values.");
            healthText.text = "Max Health: Not in Test";
            inventoryText.text = "Max Inventory Space: Not in Test";
            abTestStatusText.text = "A/B Test Inactive";
        }
    }
}